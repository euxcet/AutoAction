apply plugin: 'com.android.application'
apply plugin: 'kotlin-android'

def getProps(String propName) {
    def propsFile = rootProject.file("local.properties")
    if (propsFile.exists()) {
        def props = new Properties()
        props.load(new FileInputStream(propsFile))
        return props[propName]
    } else {
        return ""
    }
}

android {
    signingConfigs {
        debug {
            storeFile file(getProps('key.path'))
            storePassword '123456'
            keyAlias 'key0'
            keyPassword '123456'
        }
    }
    compileSdkVersion 32
    buildToolsVersion "29.0.3"

    defaultConfig {
        applicationId "com.hcifuture.datacollection"
        minSdkVersion 26
        targetSdkVersion 32
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner "androidx.test.runner.AndroidJUnitRunner"
    }

    buildTypes {
        debug {
            ndk {
                abiFilters 'armeabi-v7a'
            }
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SAVE_PATH", "\"/storage/emulated/0/PlaceData/\"")
            buildConfigField("String", "WEB_SERVER", getProps("web.server"))
        }
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android-optimize.txt'), 'proguard-rules.pro'
            buildConfigField("String", "SAVE_PATH", "\"/storage/emulated/0/PlaceData/\"")
            buildConfigField("String", "WEB_SERVER", getProps("web.server"))
        }
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }

    externalNativeBuild {
        cmake {
            path "CMakeLists.txt"
        }
    }

    sourceSets {
        main {
            main {
// canceled by CaveSpiderLZJ to avoid build errors
//                jniLibs.srcDirs = ['libs']
            }
            assets {
                srcDirs = ["src/main/assets"]
            }
        }
    }
}

dependencies {
    implementation 'androidx.core:core-ktx:1.8.0'
    implementation "org.jetbrains.kotlin:kotlin-stdlib:$kotlin_version"
    implementation 'androidx.appcompat:appcompat:1.4.2'
    implementation 'androidx.constraintlayout:constraintlayout:2.1.4'
    implementation 'com.google.android.material:material:1.6.1'
    implementation project(path: ':SharedLibrary')
    testImplementation 'junit:junit:4.13.2'
    androidTestImplementation 'androidx.test:runner:1.4.0'
    androidTestImplementation 'androidx.test.espresso:espresso-core:3.4.0'

    implementation 'com.lzy.net:okgo:3.0.4'
    implementation 'pub.devrel:easypermissions:2.0.1'
    api 'com.google.code.gson:gson:2.8.9'
    implementation 'androidx.work:work-runtime:2.7.1'

    // CameraX core library using the camera2 implementation
    def camerax_version = "1.1.0-alpha12"
    // The following line is optional, as the core library is included indirectly by camera-camera2
    implementation "androidx.camera:camera-core:${camerax_version}"
    implementation "androidx.camera:camera-camera2:${camerax_version}"
    // If you want to additionally use the CameraX Lifecycle library
    implementation "androidx.camera:camera-lifecycle:${camerax_version}"
    // If you want to additionally use the CameraX VideoCapture library
    implementation "androidx.camera:camera-video:1.1.0-alpha12"
    // If you want to additionally use the CameraX View class
    implementation "androidx.camera:camera-view:1.0.0-alpha32"
    // If you want to additionally use the CameraX Extensions library

    implementation('org.tensorflow:tensorflow-lite:0.0.0-nightly') { changing = true }
    implementation('org.tensorflow:tensorflow-lite-support:0.0.0-nightly') { changing = true }

    implementation 'com.gyf.cactus:cactus:1.1.3-beta13'

    implementation 'com.github.PhilJay:MPAndroidChart:v3.1.0'

//    api 'com.amap.api:3dmap:latest.integration'
    api 'com.amap.api:location:latest.integration'
    api 'com.amap.api:search:latest.integration'
}